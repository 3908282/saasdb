String updateObject(tenantId, object)
{
	var entity = object.getEntity();
	get fields;
	
	var uuid = newUuid();
	
	Map<fieldId,Object> mapValue = new HashMap();
	foreach(field:fields)
	{
		if(field is relation and masterDetail) //主从关系,是集合
		{
			Collection collection = object[field];
			
			Collection uuidCollection = new ArrayList();
			
			get toDeleteCollection, newCollection, updateCollection;
			
			for(subobject:toDeleteCollection)
			{
				deleteObject(subobject);
			}
			for(subobject:updateCollection)
			{
				uuidCollection.add(updateObject(subobject));
			}
			foreach(subobject:newCollection)
			{
				subobject.parentid = uuid;
				uuidCollection.add(create(subobject));
			}
			
			mapValue.put(fieldId, uuidCollection);
		}
		else if(field is relation)
		{
			var refObject = object[field];
			var refObjectUuid = create(refObject);
			mapValue.put(fieldId, refObjectUuid);
		}
		else
			mapValue.put(fieldId, object[field]);
	}
	

	updateRow(uuid, object.getName(), tenantId, entity.getId(), mapValue());
	return uuid;
}