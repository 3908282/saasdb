field may be field.company

Object[] getManyObject(tenantId,entityid, [uuids], [fields])
{
	
	
	Object valuess[][] = getManyRow(uuid, filter(fields,null)); //fields should be filter by this level
	
	Object[] result = new Object[valuess.length];
	
	Map<String, Object> cache = new HashMap();
	foreach(values:valuess)
	{
		foreach(field:fields)
		{
			if(field is relation)
			{
				if(oneToX)
				{
					String subuuid = values[field];
					String[] subFields = filter(fields, field); //filter sub fields by field
					values[field] = fromCache(subuuid) or getOneObject(subuuid, subFields);
				}
				else if(masterDetail or multivalue)
				{
					String[] subuuids = values[field];
					String[] subFields = filter(fields, field); //filter sub fields by field
					//Object[] subObjects = new Object[subuuids.length];
					values[field] = fromCache(subuuids) + getManyObject(subuuids, subFields);
				}
			}
		}
		
		result.add(createObject(entityId, values));
		
	}
	
	return result;
}

//if fields[n] is field.a, return a, or field.a.b return a.b
String[] filter(String[] fields, String field)
{
	return map(fields, function()-->
		if (fields[n] beginWith field)
			return fields[n].trimWith(field);  
		);
}